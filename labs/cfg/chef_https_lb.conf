  server {
    listen 443;
    server_name chef-server;

    set_by_lua $data_collector_token 'return os.getenv("DATA_COLLECTOR_TOKEN")';

    access_log /var/log/opscode/nginx/access.log opscode;
      ssl on;
      ssl_certificate /var/opt/opscode/nginx/ca/chef-server.crt;
      ssl_certificate_key /var/opt/opscode/nginx/ca/chef-server.key;
      ssl_dhparam /var/opt/opscode/nginx/ca/dhparams.pem;

      ssl_session_timeout 5m;

      ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
      ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:AES256-GCM-SHA384:AES:!aNULL:!eNULL:!EXPORT;
      ssl_prefer_server_ciphers on;
    root /var/opt/opscode/nginx/html;
    client_max_body_size 250m;

    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_pass_request_headers on;
    proxy_connect_timeout   1;
    proxy_send_timeout      300;
    proxy_read_timeout      300;

    error_page 404 =404 /404.html;
    error_page 503 =503 /503.json;
    error_page 497 =503 /500.json;

    # Whitelist the docs necessary to serve up error pages and friendly
    # html to non-chef clients hitting this host.
    location ~ "^/[0-9]{3,3}\.(json|html)|favicon.ico|index.html$" {
    }
    location "/css/" {
    }
    location "/images/" {
    }

    location /version {
      types { }
      default_type text/plain;
      alias /opt/opscode/version-manifest.txt;
    }

    location ~ "^/organizations/([^/]+)/validate" {
      allow 127.0.0.1;
      allow ::1;
      deny all;
      proxy_pass http://opscode_erchef;
    }



    location ~ "^/organizations/([^/]+)/required_recipe$" {
      # This endpoint is unique because it is defined via nginx and is not
      # handled by an upstream like oc_erchef. In order to make responses
      # consistent between Chef server and chef-zero we'll always enable
      # the location but explicitly return a 404 when the feature is disabled,
      # rather than leave it undefined. If we were to leave it undefined any
      # non-signed requests would be routed to the main index page and return
      # a 200 instead of 404.
      return 404;
    }


    # bookshelf
    location ~ "^/bookshelf/organization-.+" {
      proxy_pass http://bookshelf;
    }

    # erchef status endpoint
    location ~ "^/_status/?$" {
      types { }
      default_type application/json;
      proxy_pass http://opscode_erchef;
    }

    # This variable is set to an empty string here so it can be used in
    # dispatch.lua later on. An add-on can set this variable to be used as an
    # upstream if we determine the request was not intended to go to the API.
    set $add_on_override_upstream "";

    # Include external routes for addons
    include /var/opt/opscode/nginx/etc/addon.d/*_external.conf;

    location /_route/ {
      default_type 'application/json';
      content_by_lua_file '/var/opt/opscode/nginx/etc/scripts/dispatch_route.lua';
    }

    location / {
      satisfy any;


      set $mode "api";
      set $upstream "";
      rewrite_by_lua_file '/var/opt/opscode/nginx/etc/scripts/dispatch.lua';
      proxy_pass http://$upstream;
      proxy_redirect http://$upstream /;
    }
    location /knife_admin_key.tar.gz {
      default_type application/zip;
      alias /etc/chef/knife_admin_key.tar.gz;
    }
  }
